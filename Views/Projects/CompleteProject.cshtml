@model TaskDone_V2.Models.Project

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <h4>Edit Project Details</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
        <div class="col-md-10">
            @Html.HiddenFor(model => model.UserEmail, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UserEmail, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">

        <div class="col-md-10">
            @Html.HiddenFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">

        <div class="col-md-10">
            <div class="checkbox">
                @Html.HiddenFor(model => model.IsVolunteer)
                @Html.ValidationMessageFor(model => model.IsVolunteer, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            @Html.HiddenFor(model => model.DateCreated, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DateCreated, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DateFinished, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DateFinished, "{0:MM/dd/yyyy}", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DateFinished, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">

        <div class="col-md-10">
            @Html.HiddenFor(model => model.ProposedPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ProposedPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">

        <div class="col-md-10">
            @Html.HiddenFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">

        <div class="col-md-10">
            @Html.HiddenFor(model => model.CategoryId, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.StatusId, "StatusId", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("StatusId", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.StatusId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div>
        @Html.HiddenFor(model => model.AcceptedPrice, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.AcceptedPrice, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        <p> I agree that I have finished this project as per required by local and state law and satisfied the helpee for my service.</p>
        <p> I agree to recive the payment in a week and I also can review the helpee.</p>
    </div>
    

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Complete the Project" class="btn btn-success" />
        </div>
    </div>

}

<div>
    @Html.ActionLink("Back to List", "UserProjects", new { @class = "badge badge-pill badge-success" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
